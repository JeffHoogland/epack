#!/usr/bin/env python
# encoding: utf-8
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

from __future__ import absolute_import, print_function

import os
import sys
import magic
try:
    from urllib.parse import unquote
except:
    from urllib import unquote

from efl import elementary

from epack.backend import load_backend
from epack.gui import MainWin, ErrorWin, FileChooserWin


# the extracting application needs support to read from stdin.
# and bsdtar is great at all.
EXTRACT_MAP = {
    'application/gzip': 'bsdtar -xf -','application/x-gzip': 'bsdtar -xf -',
    'application/bzip2': 'bsdtar -xf -','application/x-bzip2': 'bsdtar -xf -',
    'application/bz2': 'bsdtar -xf -','application/x-bz2': 'bsdtar -xf -',
    'application/rar': 'bsdtar -xf -','application/x-rar': 'bsdtar -xf -',
    'application/gz': 'bsdtar -xf -','application/x-gz': 'gbsdtar -xf -',
    'application/tar': 'bsdtar -xf -','application/x-tar': 'bsdtar -xf -',
    'application/tbz2': 'bsdtar -xf -','application/x-tbz2': 'bsdtar -xf -',
    'application/tar.bz2': 'bsdtar -xf -','application/x-tar.bz2': 'bsdtar -xf -',
    'application/tar.gz': 'bsdtar -xf -','application/x-tar.gz': 'bsdtar -xf -',
    'application/tgz': 'bsdtar -xf -','application/x-tgz': 'bsdtar -xf -',
    'application/zip': 'bsdtar -xf -','application/x-zip': 'bsdtar -xf -',
    'application/Z': 'bsdtar -xf -','application/x-Z': 'bsdtar -xf -',
    'application/xz': 'bsdtar -xf -','application/x-xz': 'bsdtar -xf -',
    'application/iso9660-image': 'bsdtar -xf -','application/x-iso9660-image': 'bsdtar -xf -'
}

LIST_MAP = {
    'application/gzip': 'bsdtar -tf','application/x-gzip': 'bsdtar -tf',
    'application/bzip2': 'bsdtar -tf','application/x-bzip2': 'bsdtar -tf',
    'application/bz2': 'bsdtar -tf','application/x-bz2': 'bsdtar -tf',
    'application/rar': 'bsdtar -tf','application/x-rar': 'bsdtar -tf',
    'application/gz': 'bsdtar -tf','application/x-gz': 'gbsdtar -tf',
    'application/tar': 'bsdtar -tf','application/x-tar': 'bsdtar -tf',
    'application/tbz2': 'bsdtar -tf','application/x-tbz2': 'bsdtar -tf',
    'application/tar.gz': 'bsdtar -tf','application/x-tar.gz': 'bsdtar -tf',
    'application/tar.bz2': 'bsdtar -tf','application/x-tar.bz2': 'bsdtar -tf',
    'application/tgz': 'bsdtar -tf','application/x-tgz': 'bsdtar -tf',
    'application/zip': 'bsdtar -tf','application/x-zip': 'bsdtar -tf',
    'application/Z': 'bsdtar -tf','application/x-Z': 'bsdtar -tf',
    'application/xz': 'bsdtar -tf','application/x-xz': 'bsdtar -tf',
    'application/iso9660-image': 'bsdtar -tf -','application/x-iso9660-image': 'bsdtar -tf -'
}


def mime_type_query(fname):
    m = magic.open(magic.MAGIC_MIME_TYPE)
    m.load()
    return m.file(fname)


if __name__ == "__main__":

    backend = load_backend()
    if backend is None:
        print('Cannot find a working backend')
        exit(1)
    print('Using backend: "%s"' % backend.name)

    elementary.init()
    elementary.need.need_efreet()

    if len(sys.argv) < 2:
        FileChooserWin(backend)
    else:
        fname = sys.argv[1]
        if fname.startswith('file://'):
            fname = unquote(fname)[7:]
        else:
            fname = os.path.abspath(fname)

        mime_type = mime_type_query(fname)
        if not EXTRACT_MAP.get(mime_type):
            ErrorWin('Mimetype: "%s" is not supported' % mime_type)
        else:
            MainWin(fname, backend)

    elementary.run()
    elementary.shutdown()
